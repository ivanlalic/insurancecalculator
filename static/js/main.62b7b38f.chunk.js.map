{"version":3,"sources":["components/header.jsx","helper.js","components/Form.jsx","components/sum.jsx","components/result.jsx","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["HeaderContainer","styled","header","HeaderText","h1","Header","title","firstUpper","text","charAt","toUpperCase","slice","FormImput","div","Label","label","Select","select","InputRadio","input","Button","button","Error","Form","setSum","setLoading","useState","brand","year","plan","data","setData","error","setError","getData","e","target","name","value","onSubmit","preventDefault","result","difference","Date","getFullYear","getYearDifference","add","brandCalculator","parseFloat","planCalculator","toFixed","setTimeout","Number","onChange","type","checked","SummaryContainer","Sum","Message","p","ResultContainer","TextResult","Result","TransitionGroup","component","className","CSSTransition","classNames","key","timeout","enter","exit","Spinner","Container","FormContainer","App","sum","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.62b7b38f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\n\r\n\r\nconst HeaderContainer = styled.header`\r\n    background-color: #26C6DA;\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    color: #FFFFFF;\r\n`;\r\n\r\nconst HeaderText = styled.h1`\r\n    font-size: 2rem;\r\n    margin: 0;\r\n    font-family: 'Slabo 27px', serif;\r\n    text-align: center;\r\n\r\n`;\r\n\r\n\r\nconst Header = ({title}) => {\r\n    return (\r\n        <HeaderContainer>\r\n            <HeaderText>{title}</HeaderText>\r\n        </HeaderContainer>\r\n     );\r\n}\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","export function getYearDifference(year) {\r\n    return new Date().getFullYear() - year;\r\n}\r\n\r\n//Add % according to origin\r\nexport function brandCalculator(brand) {\r\n    let add;\r\n\r\n    switch(brand) {\r\n        case 'european':\r\n            add= 1.30;\r\n            break;\r\n        case 'american':\r\n            add= 1.15;\r\n            break;\r\n        case 'asian':\r\n            add= 1.05;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return add;\r\n}\r\n\r\n// Add % according to plan\r\n\r\nexport function planCalculator(plan) {\r\n    return (plan === 'basic') ? 1.20 : 1.50;\r\n}\r\n\r\n// Show 1st letter uppercase\r\nexport function firstUpper(text) {\r\n    return text.charAt(0).toUpperCase() + text.slice(1);\r\n}","import React, {useState} from 'react'\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\nimport {getYearDifference, brandCalculator, planCalculator} from '../helper'; \r\n\r\nconst FormImput = styled.div`\r\n    display: flex;\r\n    margin-bottom: 1rem;\r\n    align-items: center;\r\n`;\r\n\r\nconst Label = styled.label`\r\n    flex: 0 0 100px;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    display: block;\r\n    width: 100%;\r\n    padding: 1rem;\r\n    border: 1px solid #e1e1e1;\r\n    --webkit-appearance: none;\r\n`;\r\n\r\nconst InputRadio = styled.input`\r\n    margin: 0 1rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    background-color: #00838F;\r\n    font-size: 16px;\r\n    width: 100%;\r\n    padding: 1rem;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    border: none;\r\n    margin-top: 2rem;\r\n    transition: background-color .3s ease;\r\n    &:hover {\r\n        background-color: #26c6DA;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst Error = styled.div`\r\n    background-color: red;\r\n    color: white;\r\n    padding: 1rem;\r\n    width: 100%;\r\n    text-align: center;\r\n    margin-bottom: 2rem;\r\n`;\r\n\r\nconst Form = ({setSum, setLoading}) => {\r\n\r\n    // States\r\n    const [data, setData] = useState({\r\n        brand: '',\r\n        year: '',\r\n        plan: ''\r\n    });\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n\r\n    // Get values\r\n    const {brand, year, plan} = data;\r\n\r\n    //Read data from Form and pass them to state\r\n    const getData = e => {\r\n        setData({\r\n            ...data,\r\n            [e.target.name]: e.target.value \r\n        })\r\n    }\r\n\r\n    //When user press Submit\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (brand === '' || year === '' || plan === '') {\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false); \r\n\r\n        // Total min\r\n        let result = 2000; \r\n\r\n        // After validation→get year difference\r\n        const difference = getYearDifference(year);\r\n       \r\n        //3% for each year\r\n        result -= (( difference *3 ) * result) / 100;  \r\n\r\n        //American 15%\r\n        //Asian 5%\r\n        //European 30%\r\n        result = brandCalculator(brand) * result;\r\n        \r\n        //Plan→Basic add 20%\r\n        //Plan→full add 50%\r\n        result = parseFloat(planCalculator(plan) * result).toFixed(2);\r\n\r\n        //Change for spinner→spinner appears\r\n        setLoading(true);\r\n\r\n        setTimeout(()=> {\r\n            //Change for spinner→delete spinner\r\n            setLoading(false);\r\n\r\n            //Pass result to app.js\r\n            setSum({\r\n                result: Number(result),\r\n                data: data\r\n            })\r\n        }, 1000)\r\n\r\n    }\r\n\r\n    \r\n    return ( \r\n        <form\r\n            onSubmit={handleSubmit}\r\n        >\r\n            { error ? <Error>All inputs requiered</Error> : null}\r\n\r\n            <FormImput>\r\n                <Label>Car Brand</Label>\r\n                <Select\r\n                    name=\"brand\"\r\n                    value={brand}\r\n                    onChange={getData}\r\n                >\r\n                    <option value=\"\">-- Select --</option>\r\n                    <option value=\"american\">American</option>\r\n                    <option value=\"european\">European</option>\r\n                    <option value=\"asian\">Asian</option>\r\n                </Select>\r\n            </FormImput>\r\n\r\n            <FormImput>\r\n                <Label>Year</Label>\r\n                <Select\r\n                    name=\"year\"\r\n                    value={year}\r\n                    onChange={getData}\r\n                >\r\n                    <option value=\"\">-- Select --</option>\r\n                    <option value=\"2021\">2021</option>\r\n                    <option value=\"2020\">2020</option>\r\n                    <option value=\"2019\">2019</option>\r\n                    <option value=\"2018\">2018</option>\r\n                    <option value=\"2017\">2017</option>\r\n                    <option value=\"2016\">2016</option>\r\n                    <option value=\"2015\">2015</option>\r\n                    <option value=\"2014\">2014</option>\r\n                    <option value=\"2013\">2013</option>\r\n                    <option value=\"2012\">2012</option>\r\n                </Select>\r\n            </FormImput>\r\n\r\n            <FormImput>\r\n                <Label>Type of Insurance</Label>\r\n                <InputRadio \r\n                    type=\"radio\"\r\n                    name=\"plan\"\r\n                    value=\"basic\"\r\n                    checked={plan === 'basic'}\r\n                    onChange={getData}\r\n                /> Basic\r\n\r\n                <InputRadio \r\n                    type=\"radio\"\r\n                    name=\"plan\"\r\n                    value=\"full\"\r\n                    checked={plan === 'full'} //how to handle radio buttons\r\n                    onChange={getData}\r\n                /> Full\r\n            </FormImput>\r\n\r\n            <Button type=\"submit\">Search</Button>\r\n        </form>\r\n     );\r\n    }\r\n\r\nForm.propTypes = {\r\n    setSum: PropTypes.func.isRequired,\r\n    setLoading: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;\r\n\r\n\r\n","import React from 'react'\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\nimport {firstUpper} from '../helper'; \r\n\r\n\r\nconst SummaryContainer = styled.div`\r\n    padding: 1rem;\r\n    text-align: center;\r\n    background-color: #00838F;\r\n    color: #FFF;\r\n    margin-top: 1rem;\r\n`;\r\n\r\nconst Sum = ({data}) => {\r\n\r\n    const {brand, year, plan} = data;\r\n\r\n    if (brand === '' || year === '' || plan === '') return null; \r\n\r\n    return ( \r\n        <SummaryContainer>\r\n            <h2>Summary</h2>\r\n            <ul>\r\n                <li>Brand: { firstUpper(brand) }</li>\r\n                <li>Year: { firstUpper(year) }</li>\r\n                <li>Plan: { firstUpper(plan) }</li>\r\n            </ul>\r\n        </SummaryContainer>\r\n     );\r\n}\r\n\r\nSum.propTypes = {\r\n    data: PropTypes.object.isRequired\r\n}\r\n \r\nexport default Sum;","import React from 'react'\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\n\r\nconst Message = styled.p`\r\n    background-color: rgb(127, 224, 237);\r\n    margin-top: 2rem;\r\n    padding: 2rem;\r\n    text-align: center;\r\n`;\r\n\r\nconst ResultContainer = styled.div`\r\n    text-align: center;\r\n    padding: .5rem;\r\n    border: 1px solid #26C6DA;\r\n    background-color: #26C6DA;\r\n    margin-top: 1rem;\r\n    position: relative;\r\n`;\r\n\r\nconst TextResult = styled.p`\r\n    color: #00838F;\r\n    padding: 1rem;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    margin: 0;\r\n`;\r\n\r\nconst Result = ({result}) => {\r\n\r\n    return(\r\n    (result === 0) ? <Message>Chose brand, year and plan</Message> \r\n    : \r\n    (<ResultContainer>\r\n        <TransitionGroup\r\n            component=\"span\"\r\n            className=\"resultado\"\r\n        >\r\n            <CSSTransition\r\n                classNames=\"resultado\"\r\n                key={result}\r\n                timeout={{ enter: 500, exit: 500 }}\r\n            >\r\n                <TextResult>Total is <span>${result}</span></TextResult> \r\n            </CSSTransition>\r\n        </TransitionGroup>\r\n    </ResultContainer>\r\n    )\r\n    )\r\n}\r\n \r\nResult.propTypes = {\r\n    result: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div className=\"spinner\">\r\n            <div className=\"dot1\"></div>\r\n            <div className=\"dot2\"></div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, {useState} from 'react';\nimport Header from './components/header';\nimport Form from './components/Form';\nimport Sum from './components/sum';\nimport Result from './components/result';\nimport Spinner from './components/Spinner';\nimport styled from '@emotion/styled';\n\nconst Container = styled.div`\n  max-width: 600px;\n  margin: 0 auto;  \n`;\n\nconst FormContainer = styled.div`\n  background-color: #FFF;\n  padding: 3rem;\n`;\n\n\nfunction App() {\n\n  // State\n  const [sum, setSum] = useState({\n    result: 0,\n    data: {\n      brand: '',\n      year: '',\n      plan: ''\n    }\n  }); // Comes from Form\n\n\n  //state for spinner\n\n  const [loading, setLoading] = useState(false);\n\n  //Extract data\n  const {result, data} = sum;\n\n\n  return (\n    <Container>\n      <Header \n        title='Insurance Calculator'\n      />\n\n      <FormContainer>\n        <Form \n          setSum={setSum}\n          setLoading={setLoading}\n        />\n\n        {loading ? <Spinner /> : null}\n\n        <Sum \n          data={data}\n        />\n\n        { !loading ? \n        <Result \n          result={result}\n        /> \n        : null}\n        \n      </FormContainer>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}